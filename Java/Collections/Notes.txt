====================================>> Collections Framework <<==================================================

==> The Collection is a framework that provides an architecture to store and manipulate the group of objects.
    Java Collections can achieve all the operations that you perform on a data such as searching, sorting, 
    insertion, manipulation, and deletion.

    Interfaces and Classe: 
                Iterable                                            ---- Extends
                |--> List ==>{ArrayList, LinkedList, vector}        ==== Implements
                |--> Set  ==>{HashSet, LinkedHashSet} 
                |         ---> SortedSet ====>{TreeSet}
                |--> Queue --> Deque ==>{ArrayQueue}

==> Collection Methods

    -->boolean add(E element)                           boolean removeAll(Collection<?> c)
    boolean remove(Object o)                            boolean retainAll(Collection<?> c)
    boolean contains(Object o)                          Object[] toArray()
    public boolean containsAll(Collection<?> c)         clear()
    int size()
    boolean isEmpty()

==> Iterator Interfaces

    Iterator interface provides the facility of iterating the elements in a forward direction only.
    There are only three methods in the Iterator Interface:-
        public boolean hasNext() -	It returns true if the iterator has more elements otherwise it returns false.
        public Object next()	 -  It returns the element and moves the cursor pointer to the next element.
        public void remove()	 -  It removes the last elements returned by the iterator. It is less used.

        Iterator<Integer> roll= al.iterator();          // Creating Iterator Object which holds Integer type obj
        while(roll.hasNext()){               
            int toPrint= roll.next();                   //using hasNext()
            System.out.print(toPrint+ " ");
            if(toPrint==0){
                roll.remove();                         //using remove() method
            }
       }    

==> ArrayList               

    Java ArrayList class uses a dynamic array for storing the elements.
    The ArrayList in Java can have the duplicate elements also.
    Java ArrayList class maintains insertion order.
    Java ArrayList allows random access because the array works on an index basis. 
    It is like an array, but there is no size limit. 
    We can add or remove elements anytime. 
    So, it is much more flexible than the traditional array. 
    It is found in the java.util package.
    We can not create an array list of the primitive types, such as int, float, char, etc. 
    It is required to use the required wrapper class in such cases. 

    By ListIterator interface, we can iterate the ArrayList in reverse order.

==> LinkedList

    Java LinkedList class uses a doubly linked list to store the elements. 
    It provides a linked-list data structure. 
    It inherits the AbstractList class and implements List and Deque interfaces.
    Java LinkedList class is non synchronized.
    In Java LinkedList class, manipulation is fast because no shifting needs to occur.

    Here are some of the most commonly used methods explicitly available in the LinkedList class:

        addFirst(E element):    Adds the specified element to the beginning of the list.
        addLast(E element):     Adds the specified element to the end of the list.
        removeFirst():          Removes and returns the first element in the list.
        removeLast():           Removes and returns the last element in the list.
        getFirst():             Returns the first element in the list without removing it.
        getLast():              Returns the last element in the list without removing it.
        offerFirst(E element):  Adds the specified element to the beginning of the list, returning true if successful.
        offerLast(E element):   Adds the specified element to the end of the list, returning true if successful.
        removeFirstOccurence("e"):      Remove first occurrence of element from the list  
        removeLastOccurence("e"):       Remove last occurrence of element from the list  

==> ArrayList VS LinkedList

    uses:           ArrayList used *(dynamic array).    LinkedList uses *(doubly LinkedList)
    
    manipulation:   ArrayList=Difficult                 LinkedList= Easy  

    Random Access:  ArrayList= Easy                     LinkedList= difficult

    storing:        contigous                           non-contigous

    capacity:       10-default (then, no fix)           no fixed capacity

    uses:           just storage and acess.             when more manipulations are needed

==> HashSet <NOT GENERIC, NO NEED TO SPECIFY GENERIC TYPE>

    Java HashSet class is used to create a collection that uses a hash table for storage. 
    It inherits the AbstractSet class and implements Set interface.
    HashSet stores the elements by using a mechanism called hashing.
    HashSet contains unique elements only.
    HashSet allows null value.
    HashSet doesn't maintain the insertion order. Here, elements are inserted on the basis of their hashcode.
    HashSet is the best approach for search operations.
    The initial default capacity of HashSet is 16, and the load factor is 0.75.

    {{{{{Hashing}}}}}
        Hashing is a fundamental technique to convert data of arbitrary size into a 
            fixed-size value (usually a hash code or hash value) of a fixed length. 
        This process is called "hashing," and the resulting value is referred to as the "hash."
        The primary purpose of hashing is to efficiently index and retrieve data in large datasets or databases. 
        Hashing provides a way to create a unique representation of data.

    {{{{{Hash Table}}}}}
        A hash table, also known as a hash map, is a data structure that provides efficients data retrieval and storage. 
        It is based on the concept of hashing, where data is mapped to unique indices or keys in an array. 
        Used in Dictionaries and databases: To store key-value pairs for efficient lookups and updates and,
            Caches: To store frequently accessed data for fast retrieval.
    
    {{{{{Load Factor}}}}}
        The load factor is a metric used to measure the fullness or occupancy of a data structure, 
            particularly in the context of hash tables.
            Load Factor = Number of elements / Capacity 
        A load factor of 1 means the hash table is completely full, while a load factor of 0 means it is empty. 
        maintain a load factor that is neither too high nor too low to achieve a good balance between 
        space efficiency and performance.
        Commonly used load factor values in hash tables are 0.75

    Contructors:
                                    HashSet()       construct a default HashSet.
                        HashSet(int capacity)	    initialize the capacity of the hash set to the given integer value capacity. 
                                                    The capacity grows automatically as elements are added to the HashSet.
        HashSet(int capacity, float loadFactor)     initialize the capacity of the hash set to the given integer value capacity 
                                                    and the specified load factor.
                            
==> LinkedHashSet

    Java LinkedHashSet class is a Hashtable and Linked list implementation of the Set interface. 
    It inherits the HashSet class and implements the Set interface.
    Java LinkedHashSet class maintains <<<<<insertion order>>>>>.

==> TreeSet

    Java TreeSet class implements the Set interface that uses a tree for storage. 
    It inherits AbstractSet class and implements the NavigableSet interface. 
    The objects of the TreeSet class are stored in ascending order.
    Java TreeSet class access and retrieval times are quiet fast.
    Java TreeSet class doesn't allow null element.
    It alows only Homogenous datatypes.
    Working of the TreeSet: comparator, complete binary tree, sorted order etc

==> HashMap

    A map contains values on the basis of key, i.e. key and value pair. 
    Each key and value pair is known as an entry. A Map contains unique keys.
    A Map doesn't allow duplicate keys, but you can have duplicate values.
    HashMap and LinkedHashMap allow null keys and values.
    A Map can't be traversed, so you need to convert it into Set using keySet() or entrySet() method.

    hm.EntrySet()       entry.getValue()    hm.containsKey()    
    entry.getKey()      hm.put()            hm.containsValue()
    hm.replace()        hm.remove()         hm.get(key)

==> Queue

    It is used to keep the elements that are processed in the First In First Out (FIFO) manner. 
    It is an ordered list of objects, where insertion of elements occurs at the end of the list, 
        and removal of elements occur at the beginning of the list.
    
    boolean add(object)	    It is used to insert the specified element into this queue and return true upon success.
    boolean offer(object)	It is used to insert the specified element into this queue.
    Object remove()	        It is used to retrieves and removes the head of this queue.
    Object poll()	        It is used to retrieves and removes the head of this queue, or returns null if this queue is empty.
    Object element()	    It is used to retrieves, but does not remove, the head of this queue.
    Object peek()	        It is used to retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.

==> Priority Queue

    PriorityQueue is class defined in the collection framework that gives us a way for processing the objects on the basis of priority.
    sometimes the elements of the queue are needed to be processed according to the priority, that's where a PriorityQueue comes into action.

    q.add()     Object remove()      Object peek()    Object poll() -head      Object element() -head(but not removes)

==> Deque

    The interface called Deque is present in java.util package. It is the subtype of the interface queue. 
    The Deque supports the addition as well as the removal of elements from both ends of the data structure.      
    A deque can be used as a stack or a queue. 
    Unlike Queue, we can add or remove elements from both sides.
    Null elements are not allowed in the ArrayDeque.
    ArrayDeque has no capacity restrictions.
    ArrayDeque is faster than LinkedList and Stack.