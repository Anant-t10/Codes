==> static
    We can apply static keyword with variables, methods, blocks and nested classes. 
    The static keyword belongs to the class than an instance of the class.
    
    The static can be:
        Variable (also known as a class variable)
        Method (also known as a class method)
        Block

    Without static:
        class Student{                  //Example of code without static keyword
            int rollno;  
            String name;  
            String college="ITS";  
        }  
    
    A static method can access static data member and can change the value of it.

    a static block is a special block of code that runs when the class is loaded into the 
    memory by the Java Virtual Machine (JVM). These static blocks are also known as static initializers.

    "this" can be passed as an argument in the method call.
    "this" can be used to refer current class instance variable.

==> Inheritence

    Multiple inheritance is not supported in Java through class.
    Super Constructor of the parent class is called first whenever the child is created. 


==> Polymorphism:-
    
    > Method Overloading

        In Java, Method Overloading is not possible by changing the return type of the method only.
        There are two ways to overload the method in java:-
            By changing number of arguments
            By changing the data type
        Compile Time Error is better than Run Time Error. 
        So, java compiler renders compiler time error if you declare the same method having same parameters.
    
    > Method Overriding

        If subclass (child class) has the same method as declared in the parent class, it is known as method overriding in Java.
        If a subclass provides the specific implementation of the method that has been declared by one of its parent class, 
        it is known as method overriding.

        The method must have the same name as in the parent class
        The method must have the same parameter as in the parent class. 

==> Abstraction

    Abstraction is a process of hiding the implementation details and showing only functionality to the user.
    Another way, it shows only essential things to the user and hides the internal details.

    >Abstract class

        A class which is declared as abstract is known as an abstract class. 
        It can have abstract and non-abstract methods. 
        It needs to be extended and its method implemented. It cannot be instantiated.
        An abstract class must be declared with an abstract keyword.
        It cannot be instantiated.
        It can have constructors and static methods also.
        It can have final methods which will force the subclass not to change the body of the method.
        If you are extending an abstract class that has an abstract method, you must either provide the 
            implementation of the method or make this class abstract.
    
    >Interface

        The interface in Java is a mechanism to achieve abstraction. 
        There can be only abstract methods in the Java interface, not method body. 
        It is used to achieve abstraction and multiple inheritance in Java.
        By interface, we can support the functionality of multiple inheritance.
        It can be used to achieve loose coupling.
        It provides total abstraction; means all the methods in an interface are declared with the empty body, 
            and all the members are public, static and final by default.
        A class that implements an interface must implement all the methods declared in the interface.

==> Encapsulation

    Encapsulation in Java is a process of wrapping code and data together into a single unit.
    It is a way to achieve data hiding in Java because other class will not be able to access 
        the data through the private data members.

    >Package
        A java package is a group of similar types of classes, interfaces and sub-packages. 
        Package in java can be categorized in two form, built-in package and user-defined package.
        Java package provides access protection.
        Java package removes naming collision.
    
    >Access Modifiers

        The access modifiers specifies the accessibility or scope of a field, method, constructor, or class. 
        Change the access level of fields, constructors, methods, and class by applying the access modifier on it.

        Private:    The access level of a private modifier is only within the class. 
                    It cannot be accessed from outside the class.
        Default:    The access level of a default modifier is only within the package. 
                    It cannot be accessed from outside the package. 
                    If you do not specify any access level, it will be the default.
        Protected:  The access level of a protected modifier is within the package and 
                    outside the package through child class. If you do not make the child class, 
                    it cannot be accessed from outside the package.
        Public:     The access level of a public modifier is everywhere. 
                    It can be accessed from within the class, outside the class, 
                    within the package and outside the package.